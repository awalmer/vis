crime_offense_summary <- crime_offense_summary %>%
arrange(desc(n)) %>%
slice(1:10)
crime_offense_summary <- crimes_2024 %>%
count(Offense_Category)
crime_offense_summary <- crime_offense_summary %>%
arrange(desc(n)) %>%
slice(1:10)
dw_publish_chart(offense_chart)
offense_chart <- dw_copy_chart(copy_from = "U9ABN")
dw_data_to_chart(crime_offense_summary, offense_chart)
dw_edit_chart(offense_chart, title = "Top 10 highest categories of crime offenses in Minneapolis in 2024",
intro = "Almost 13,000 larceny and theft offenses and over 8,000 assault offenses were reported.", source_name = "Open Data Minneapolis")
dw_publish_chart(offense_chart)
dw_retrieve_chart_metadata(offense_chart)
dw_edit_chart(offense_chart,
visualize = list(
"base-color" = "#8ACE00",
"sort-bars" = "true",
"rules" = "true",
"background" = "true",
"block-labels" = "true",
"value-label-alignment" = "right"
)
)
dw_publish_chart(offense_chart)
crime_neighborhood_summary <- crimes_2024 %>%
count(Neighborhood)
crime_neighborhood_summary <- crime_neighborhood_summary %>%
arrange(desc(n)) %>%
slice(1:10)
my_function <- function() {
#make a new data frame that holds data just for precinct 1
precinct_data <- crime_data %>% filter(Precinct== 1)
#count number of arrests per year in that precinct
precinct_summary <- precinct_data %>%count(Year)
#create new chart
my_chart <- dw_create_chart(
type="d3-bars",
)
#add data
dw_data_to_chart(precinct_summary, my_chart)
#edit chart
dw_edit_chart(my_chart, title = paste("Reported crimes by year in Minneapolis Precinct 1"), source_name = "Open Data Minneapolis")
#publish
dw_publish_chart(my_chart)
}
#Call the function to run it
my_function()
#add a parameter called precinct
my_function <- function(precinct) {
#instead of naming the precinct here, use the parameter
precinct_data <- crime_data %>% filter(Precinct == precinct)
precinct_summary <- precinct_data %>%count(Year)
my_chart <- dw_create_chart(
type="d3-bars",
)
dw_data_to_chart(precinct_summary, my_chart)
#Again, use the parameter instead of naming the specific precinct in the headline
dw_edit_chart(my_chart, title = paste("Reported crimes by year in Minneapolis Precinct", precinct), source_name = "Open Data Minneapolis")
dw_publish_chart(my_chart)
}
#Call the function and pass an argument -- "2"-- to the parameter
#This passes the 2 everywhere we have the parameter in the function, so our graphic will display crimes in precinct 2
my_function("2")
for(precinct in unique(crime_data$Precinct)) {
my_function(precinct)
}
pixar_films <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')
public_response <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')
View(pixar_films)
View(public_response)
join()
join
View(pixar_films)
tuesdata <- tidytuesdayR::tt_load(2025, week = 36)
library(tidytuesdayR)
install.packages("tidytuesdayR")
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load(2025, week = 36)
country_lists <- tuesdata$country_lists
rank_by_year <- tuesdata$rank_by_year
View(country_lists)
View(rank_by_year)
library(httr)
library(tidyverse)
library(jsonlite)
q
req <- GET("api.henleypassportindex.com/api/v3/countries")
parsed <- req$content |>
rawToChar() |>
fromJSON()
View(parsed)
rank_by_year <- parsed$countries |>
filter(has_data) |>
tidyr::unnest_longer(col = data) |>
select(code, country, region, data, year = data_id) |>
unnest_wider(col = data)
View(rank_by_year)
list_to_nested_df <- function(input_list) {
processed_data <- lapply(input_list, function(x) {
if(is.data.frame(x)) {
toJSON(I(list(x)))
} else {
x
}
})
df <- data.frame(processed_data)
return(df)
}
parsed <- req$content |>
rawToChar() |>
fromJSON()
rank_by_year <- parsed$countries |>
filter(has_data) |>
tidyr::unnest_longer(col = data) |>
select(code, country, region, data, year = data_id) |>
unnest_wider(col = data)
rank_by_year_1 <- tuesdata$rank_by_year
View(rank_by_year_1)
rank_by_year==rank_by_year_1
tuesdata <- tidytuesdayR::tt_load(2025, week = 36)
parsed <- req$content |>
rawToChar() |>
fromJSON()
rank_by_year <- parsed$countries |>
filter(has_data) |>
tidyr::unnest_longer(col = data) |>
select(code, country, region, data, year = data_id) |>
unnest_wider(col = data)
list_to_nested_df <- function(input_list) {
processed_data <- lapply(input_list, function(x) {
if(is.data.frame(x)) {
toJSON(I(list(x)))
} else {
x
}
})
df <- data.frame(processed_data)
return(df)
}
country_lists <- data.frame()
for (i in unique(rank_by_year$code)) {
print(i)
req2 <- GET(paste0("api.henleypassportindex.com/api/v3/visa-single/", i))
parsed2 <- req2$content |>
rawToChar() |>
fromJSON()
add <- list_to_nested_df(parsed2)
country_lists <-  rbind(add, country_lists)
Sys.sleep(2)
}
country_lists |>
mutate(across(c(3:7),
~map(.x, ~fromJSON(.x)[[1]] |> tibble())))
library(tidyverse)
library(jsonlite)
rank_by_year <- parsed$countries |>
filter(has_data) |>
tidyr::unnest_longer(col = data) |>
select(code, country, region, data, year = data_id) |>
unnest_wider(col = data)
list_to_nested_df <- function(input_list) {
processed_data <- lapply(input_list, function(x) {
if(is.data.frame(x)) {
toJSON(I(list(x)))
} else {
x
}
})
df <- data.frame(processed_data)
return(df)
}
country_lists <- data.frame()
for (i in unique(rank_by_year$code)) {
print(i)
req2 <- GET(paste0("api.henleypassportindex.com/api/v3/visa-single/", i))
parsed2 <- req2$content |>
rawToChar() |>
fromJSON()
add <- list_to_nested_df(parsed2)
country_lists <-  rbind(add, country_lists)
Sys.sleep(2)
}
rm(ls=c())
rm(c(ls())
)
rm(list = ls())
tuesdata <- tidytuesdayR::tt_load(2025, week = 36)
country_lists <- tuesdata$country_lists
req <- GET("api.henleypassportindex.com/api/v3/countries")
parsed <- req$content |>
rawToChar() |>
fromJSON()
rank_by_year <- parsed$countries |>
filter(has_data) |>
tidyr::unnest_longer(col = data) |>
select(code, country, region, data, year = data_id) |>
unnest_wider(col = data)
View(req)
View(tuesdata)
View(parsed)
View(rank_by_year)
View(country_lists)
country_lists |>
mutate(across(c(3:7),
~map(.x, ~fromJSON(.x)[[1]] |> tibble())))
country_lists <- tuesdata$country_lists
View(country_lists)
country_lists$visa_online[1]
unique(rank_by_year$year)
length(unique(rank_by_year$year))
rank_by_year[rank_by_year$region=="ASIA"]
rank_by_year[rank_by_year$region=="ASIA",]
unique(rank_by_year[rank_by_year$region=="ASIA",]$country)
asia <- rank_by_year[rank_by_year$region=="ASIA",]
toJSON(asia, stream = TRUE, pretty = TRUE)
toJSON(asia, stream = TRUE, pretty = TRUE)
class(rank_by_year$year)
rank_by_year$year <- as.integer(rank_by_year$year)
rank_by_year[, c("rank", "visa_free_count", "year")] <- lapply(df[, c("rank", "visa_free_count", "year")], as.integer)
rank_by_year <- tuesdata$rank_by_year
<- lapply(df[, c("rank", "visa_free_count", "year")], as.integer)
rank_by_year[, c("rank", "visa_free_count", "year")]
rank_by_year[, c("rank", "visa_free_count", "year")] <- lapply(rank_by_year[, c("rank", "visa_free_count", "year")], as.integer)
class(rank_by_year$rank)
class(rank_by_year$visa_free_count)
class(rank_by_year$year)
20*32
nrow(asia)
# list of unique countries within Asia:
unique(rank_by_year[rank_by_year$region=="ASIA",]$country)
asia <- rank_by_year[rank_by_year$region=="ASIA",]
toJSON(asia, stream = TRUE, pretty = TRUE)
length(toJSON(asia, stream = TRUE, pretty = TRUE))
setwd("/Users/auraleewalmer/Documents/github-vis/vis")
cd(0)
cd()
pwd()
getwd()
setwd("/Users/auraleewalmer/Documents/github-vis/vis/src/")
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
heatmap(asia, Colv = NA, col = cm.colors(256), scale = "column",
RowSideColors = rc, margins = c(5,10),
xlab = "year", ylab =  "visa_free_count")
x <- as.matrix(asia)
x
heatmap(x, Colv = NA, col = cm.colors(256), scale = "column",
RowSideColors = rc, margins = c(5,10),
xlab = "year", ylab =  "visa_free_count")
heatmap(x)
x <- as.matrix(asia, byrow = TRUE)
heatmap(x)
source("~/Documents/github-vis/vis/src/passport-data-loader.R", echo=TRUE)
View(asia)
length(unique(asia$country))
asia$country[asia$country=='Hong Kong (SAR China)',]
asia$country[asia$country=='Hong Kong (SAR China)']
asia$country[asia$country=='Taiwan (Chinese Taipei)'] <- 'Taiwan'
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
asia$country[asia$country=='Hong Kong (SAR China)'] <- 'Hong Kong'
asia$country[asia$country=='Macao (SAR China)'] <- 'Macao'
asia$country[asia$country=='Taiwan (Chinese Taipei)'] <- 'Taiwan'
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
asia_2025 <- asia[asia$year==2025]
asia_2025 <- asia[asia$year==2025,]
View(asia_2025)
rank(asia_2025$visa_free_count)
asia[order(asia$visa_free_count), ]
asia[order(-asia$visa_free_count), ]
asia_2025[order(-asia_2025$visa_free_count), ]
asia_2025 <- asia[asia$year==2025,]
asia_2025[order(-asia_2025$visa_free_count), ]
asia_2025 <- asia_2025[order(-asia_2025$visa_free_count), ]
asia_2025$rank_2025 <- asia_2025$rank
asia_2025$rank_2025 <- asia_2025$region_rank_2025
asia_2025$region_rank_2025 <- seq_along(nrow(asia_2025))
asia_2025$region_rank_2025 <- seq(1, nrow(asia_2025))
asia <- left_join(asia, asia_2025[c("country","region_rank_2025")], by = "country")
View(asia)
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
class(asia$region_rank_2025)
asia <- asia[order(-asia$region_rank_2025), ]
asia <- asia[order(-sia$region_rank_2025), ]
asia <- asia[order(asia$region_rank_2025), ]
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
asia[asia$year!=2007 & asia$year!=2009,]
# remove 2007 and 2009
asia_no0709 <- asia[asia$year!=2007 & asia$year!=2009,]
View(asia_no0709)
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia_no0709, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
asia$visa_free_count[asia$visa_free_count==0]
asia$visa_free_count[asia$visa_free_count==0] <- NA
asia$visa_free_count[asia$visa_free_count==0]
asia <- rank_by_year[rank_by_year$region=="ASIA",]
asia$country[asia$country=='Hong Kong (SAR China)'] <- 'Hong Kong'
asia$country[asia$country=='Macao (SAR China)'] <- 'Macao'
asia$country[asia$country=='Taiwan (Chinese Taipei)'] <- 'Taiwan'
asia_2025 <- asia[asia$year==2025,]
asia_2025 <- asia_2025[order(-asia_2025$visa_free_count), ]
asia_2025$region_rank_2025 <- seq(1, nrow(asia_2025))
asia <- left_join(asia, asia_2025[c("country","region_rank_2025")], by = "country")
asia <- asia[order(asia$region_rank_2025), ]
# remove 2007 and 2009, remove 0 --> NA instead
asia_no0709 <- asia[asia$year!=2007 & asia$year!=2009,]
asia_no0709$visa_free_count[asia_no0709$visa_free_count==0] <- NA
asia_no0709$visa_free_count[asia_no0709$visa_free_count==0]
# unique years: 20: 2006 to 2025
# countries by region. so make a separate df per region?
# e.g. ASIA -- 32 unique countries.
# so a heatmap that is 20 by 32?
# list of unique countries within Asia:
unique(rank_by_year[rank_by_year$region=="ASIA",]$country)
asia <- rank_by_year[rank_by_year$region=="ASIA",]
asia$country[asia$country=='Hong Kong (SAR China)'] <- 'Hong Kong'
asia$country[asia$country=='Macao (SAR China)'] <- 'Macao'
asia$country[asia$country=='Taiwan (Chinese Taipei)'] <- 'Taiwan'
asia_2025 <- asia[asia$year==2025,]
asia_2025 <- asia_2025[order(-asia_2025$visa_free_count), ]
asia_2025$region_rank_2025 <- seq(1, nrow(asia_2025))
asia <- left_join(asia, asia_2025[c("country","region_rank_2025")], by = "country")
asia <- asia[order(asia$region_rank_2025), ]
# remove 2007 and 2009, remove 0 --> NA instead
asia_no0709 <- asia_no0709[asia_no0709$year!=2007 & asia_no0709$year!=2009,]
asia_no0709$visa_free_count[asia_no0709$visa_free_count==0] <- NA
asia_no0709$visa_free_count[asia_no0709$visa_free_count==0]
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(asia_no0709, "data/asia-passport.json", stream = TRUE, pretty = TRUE)
View(rank_by_year)
unique(rank_by_year$country)
## Region breakdown
europe <- rank_by_year[rank_by_year$region=="EUROPE",]
europe_2025 <- europe[europe$year==2025,]
View(europe_2025)
europe_2025 <- europe_2025[order(-europe_2025$visa_free_count), ]
View(asia)
## Region breakdown
europe <- rank_by_year[rank_by_year$region=="EUROPE",]
europe_2025 <- europe[europe$year==2025,]
europe_2025 <- europe_2025[order(-europe_2025$visa_free_count), ]
europe_2025$region_rank_2025 <- seq(1, nrow(europe_2025))
europe <- left_join(europe, europe_2025[c("country","region_rank_2025")], by = "country")
europe <- europe[order(europe$region_rank_2025), ]
View(europe)
europe_no0709 <- europe_no0709[europe_no0709$year!=2007 & europe_no0709$year!=2009,]
# remove 2007 and 2009, remove 0 --> NA instead
asia_no0709 <- asia[asia$year!=2007 & asia$year!=2009,]
asia_no0709$visa_free_count[asia_no0709$visa_free_count==0] <- NA
View(asia_no0709)
europe_no0709 <- europe[europe$year!=2007 & europe$year!=2009,]
europe_no0709$visa_free_count[europe_no0709$visa_free_count==0] <- NA
#toJSON(asia, stream = TRUE, pretty = TRUE)
write_json(europe_no0709, "data/europe-passport.json", stream = TRUE, pretty = TRUE)
View(parsed)
View(country_lists)
dflisttest <- list("asia"=asia_no0709, "europe"=europe_no0709)
View(dflisttest)
dflisttest[1]
dflisttest[[1]]
names(dflisttest)
names(dflisttest)[1]
dflisttest[1]
View(rank_by_year)
#Asia:
asia <- filterByRegion(rank_by_year, "ASIA")
# Region Data Frame:
filterByRegion <- function(passport_data, region) {
region_data <- passport_data[passport_data$region==region,]
region_data_2025 <- region_data[region_data$year==2025,]
region_data_2025$region_rank_2025 <- seq(1, nrow(region_data_2025))
region_data <- left_join(region_data, region_data_2025[c("country","region_rank_2025")], by = "country")
region_data <- region_data[order(region_data$region_rank_2025), ]
return(region_data)
}
# Cleaned Region Data Frame:
cleanRegionData <- function(region_data, replace_0=c("yes","no"), remove_0709=c("yes","no")) {
cleandata <- region_data
if (replace_0=="yes") {
cleandata$visa_free_count[cleandata$visa_free_count==0] <- NA
} else {}
if (remove_0709=="yes") {
cleandata <- cleandata[cleandata$year!=2007 & cleandata$year!=2009,]
} else {}
return(cleandata)
}
dfWriteJSON <- function(list_dfs) {
for (d in 1:length(list_dfs)) {
name <- names(dflisttest)[d]
df <- dflisttest[d]
write_json(df, paste0("data/", name, "-passport.json"), stream = TRUE, pretty = TRUE)
}
}
#Asia:
asia <- filterByRegion(rank_by_year, "ASIA")
# Europe:
europe <- filterByRegion(rank_by_year, "EUROPE")
View(asia)
View(asia_no0709)
# Region Data Frame:
filterByRegion <- function(passport_data, region) {
region_data <- passport_data[passport_data$region==region,]
region_data_2025 <- region_data[region_data$year==2025,]
region_data_2025 <- region_data_2025[order(-region_data_2025$visa_free_count), ]
region_data_2025$region_rank_2025 <- seq(1, nrow(region_data_2025))
region_data <- left_join(region_data, region_data_2025[c("country","region_rank_2025")], by = "country")
region_data <- region_data[order(region_data$region_rank_2025), ]
return(region_data)
}
#Asia:
asia <- filterByRegion(rank_by_year, "ASIA")
# Europe:
europe <- filterByRegion(rank_by_year, "EUROPE")
replaceNames <- function(cleandata, number_name_replacements,
list_old_names, list_new_names) {
for (i in 1:number_name_replacements) {
cleandata$country[cleandata$country==list_old_names[i]] <- list_new_names[i]
}
return(cleandata)
}
asia_names_old <- list('Hong Kong (SAR China)', 'Macao (SAR China)', 'Taiwan (Chinese Taipei)')
asia_names_new <- list('Hong Kong', 'Macao', 'Taiwan')
asia_name_replacements <- replaceNames(asia, 3, asia_names_old, asia_names_new)
asia_names_old[1]
asia_names_old[[1]]
View(dflisttest)
dflisttest[1]
dflisttest[[1]]
names(dflisttest)[[1]]
dflisttest[[1]]
dflisttest[1]
asia_names_old[[1]]
asia_names_new[[1]]
replaceNames <- function(cleandata, number_name_replacements,
list_old_names, list_new_names) {
for (i in 1:number_name_replacements) {
cleandata$country[cleandata$country==list_old_names[[i]]] <- list_new_names[[i]]
}
return(cleandata)
}
dfWriteJSON <- function(list_dfs) {
for (d in 1:length(list_dfs)) {
name <- names(dflisttest)[[d]]
df <- dflisttest[[d]]
write_json(df, paste0("data/", name, "-passport.json"), stream = TRUE, pretty = TRUE)
}
}
asia_names_old <- list('Hong Kong (SAR China)', 'Macao (SAR China)', 'Taiwan (Chinese Taipei)')
asia_names_new <- list('Hong Kong', 'Macao', 'Taiwan')
#Asia:
asia <- filterByRegion(rank_by_year, "ASIA")
asia_name_replacements <- replaceNames(asia, 3, asia_names_old, asia_names_new)
replaceNames <- function(cleandata, number_name_replacements,
list_old_names, list_new_names) {
for (i in 1:number_name_replacements) {
cleandata$country[cleandata$country==list_old_names[[i]]] <- list_new_names[[i]]
}
return(cleandata)
}
View(asia_name_replacements)
asia <- cleanRegionData(asia, replace_0="yes", remove_0709="yes")
View(asia)
#Asia:
asia <- filterByRegion(rank_by_year, "ASIA")
asia <- cleanRegionData(asia, replace_0="yes", remove_0709="yes")
asia <- replaceNames(asia, 3, asia_names_old, asia_names_new)
# Europe:
europe <- filterByRegion(rank_by_year, "EUROPE")
View(europe)
dfWriteJSON(region_df_list)
## Export to JSON:
region_df_list <- list("asia"=asia, "europe"=europe)
dfWriteJSON(region_df_list)
View(rank_by_year)
# Europe:
europe <- filterByRegion(rank_by_year, "EUROPE")
dfWriteJSON <- function(list_dfs) {
for (d in 1:length(list_dfs)) {
name <- names(dflisttest)[[d]]
df <- dflisttest[[d]]
write_json(df, paste0("data/", name, "-passport.json"), stream = TRUE, pretty = TRUE)
}
}
dfWriteJSON(region_df_list)
# Europe:
europe <- filterByRegion(rank_by_year, "EUROPE")
## Export to JSON:
region_df_list <- list("asia"=asia, "europe"=europe)
dfWriteJSON <- function(list_dfs) {
for (d in 1:length(list_dfs)) {
name <- names(list_dfs)[[d]]
df <- list_dfs[[d]]
write_json(df, paste0("data/", name, "-passport.json"), stream = TRUE, pretty = TRUE)
}
}
## Export to JSON:
region_df_list <- list("asia"=asia, "europe"=europe)
dfWriteJSON(region_df_list)
# Africa:
africa <- filterByRegion(rank_by_year, "AFRICA")
## Export to JSON:
region_df_list <- list("asia"=asia, "europe"=europe, "africa"=africa)
dfWriteJSON(region_df_list)
